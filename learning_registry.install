<?php
/**
 * @file
 * Installation file for the learning_registry module.
 *
 * This installation file sets up the database for the learning_registry module.
 */

/**
 * Implementation of hook_install()
 */
function learning_registry_install() {
  drupal_set_message((t('Installing learning_registry.')));
  drupal_install_schema('learning_registry');
}

function learning_registry_enable() {
  // set module weight lower than workflow or pathauto. This query lifted from
  // http://drupal.org/node/110238#comment-3567274
  $workflow_weight =
    db_result(db_query("SELECT weight FROM {system} WHERE type = 'module' AND name = 'workflow'"));
  $pathauto_weight =
    db_result(db_query("SELECT weight FROM {system} WHERE type = 'module' AND name = 'pathauto'"));
  if ($pathauto_weight > $workflow_weight) { 
    $weight=$pathauto_weight; } 
  else { 
    $weight=$workflow_weight; }
  
  db_query("UPDATE {system} SET weight = %d WHERE type = 'module' AND name = 'learning_registry'", $weight + 1);
}

/**
 * Implementation of hook_uninstall()
 */
function learning_registry_uninstall() {
  drupal_uninstall_schema('learning_registry');
  // remove any configuration values. shamelessly stolen from
  // http://api.drupal.org/api/drupal/includes--bootstrap.inc/function/variable_del/6#comment-10934
  $result = db_query("SELECT name from {variable} WHERE name LIKE 'learning_registry_%'");
  while ($var_name = db_result($result)) {
    variable_del($var_name);
  }
}

/**
 * Implementation of hook_schema()
 *
 * @returns $schema
 *   An array providing the DB schema definition required by the schema API.
 */
function learning_registry_schema() {
  $schema['learning_registry'] = array(
    'description' => t('Tracks which Drupal nodes have been published to the registry.'),
    'fields' => array(
      'nid' => array(
        'description' => t('The primary identifier for a node.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),

      'published' => array(
        'description' => t('The original date of publication to the LR node.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),

      'updated' => array(
        'description' => t('The most recent update to the LR node.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
        
      'queued' => array(
        'description' => t('Flag to determine if node is queued for processing.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),

      'docid' => array(
        'description' => t('The doc ID returned on successful submission to the Learning Registry.'),
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'changed' => array('updated'),
    ),
    'primary key' => array('nid'),
  );

  return $schema;
}
